from project_euler.library.series import fibonacci_series

title = "Multiples of 3 and 5."

description = "Each new term in the Fibonacci sequence is generated by " \
              "adding the previous two terms. By starting with 1 and 2, " \
              "the first 10" \
              "terms will be:\n\n" \
              \
              "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\n" \
              \
              "By considering the terms in the Fibonacci sequence whose" \
              "values do not exceed four million, find the sum of the " \
              "even-valued terms."

strategy = "Every third Fibonacci number is even. Some math shows that the " \
           "following recurrence holds: E_n = 4E_(n - 1) + E_(n - 2)." \
           "One could take this a step further and find what the recurrence " \
           "relation for the sum of the first n terms of E_n is, and use an " \
           "estimation to find out what n is. None of this is implemented."

answer_b64 = b'NDYxMzczMg==\n'


def solve(bound: int=4_000_000) -> str:
    series = fibonacci_series()

    counter = 0

    for rabbits in series:
        if rabbits >= bound:
            break

        if rabbits % 2 == 0:
            counter += rabbits

    return str(counter)
